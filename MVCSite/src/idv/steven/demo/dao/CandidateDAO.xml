<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  

<mapper namespace="idv.steven.demo.dao.CandidateDAO">
	<sql id="pk">electionID, cityName, areaName, votedNo</sql>  
    <sql id="fields">electionID, cityName, areaName, votedNo, name, partyName, votes, elected</sql>
     
    <resultMap type="idv.steven.demo.dto.Candidate" id="candidate">
        <id column="electionID" property="electionID"/>
        <id column="cityName" property="cityName"/>
        <id column="areaName" property="areaName"/>
        <id column="votedNo" property="votedNo"/>
        <result column="name" property="name"/>
        <result column="partyName" property="partyName"/>
        <result column="votes" property="votes"/>
        <result column="elected" property="elected"/>
    </resultMap>

    <select id="findAll" resultMap="candidate">  
        select <include refid="fields"/>
        from Candidate
		order by <include refid="pk"/>
    </select>
    
    <select id="find" resultType="idv.steven.demo.dto.Candidate">  
        select <include refid="fields"/>
        from Candidate
		where electionID = #{electionID} and cityName = #{cityName} and areaName = #{areaName} and votedNo = #{votedNo} 
    </select>
    
    <select id="findCityName" resultMap="java.lang.String">
		select distinct cityName
		from candidate
		where ElectionID = #{electionID}
		order by CityName
    </select>

    <select id="findAreaName" resultMap="java.lang.String">
		select distinct areaName
		from candidate
		where ElectionID = #{electionID} and cityName = #{cityName}
		order by areaName
    </select>
    
    <select id="findCandidate" resultMap="java.lang.String">
		select <include refid="fields"/>
		from candidate
		where where electionID = #{electionID} and cityName = #{cityName} and areaName = #{areaName}
		order by votedNo
    </select>
    
    <insert id="create">
    	insert into Candidate (<include refid="fields"/>)
        values (#{candidate.electionID}, #{candidate.cityName}, #{candidate.areaName}, #{candidate.votedNo}, #{candidate.name}, #{candidate.partyName}, #{candidate.votes}, #{candidate.elected})
    </insert>
    
    <insert id="createSumOfCandidate">
    	insert into Candidate(electionID, cityName, areaName, votedNo, votes)
		select electionID, cityName, areaName, votedNo, sum(votes) as votes
		from unit
		where ElectionID = #{electionID} and cityName = #{cityName} and areaName = #{name} and votedNo != 0
		group by electionID, cityName, areaName, votedNo
    </insert>
    
    <update id="updateCandidateDetail">
    	update Candidate
    	set name = #{candidate.name}, partyName = #{candidate.partyName}
    	where electionID = #{candidate.electionID} and cityName = #{candidate.cityName} and areaName = #{candidate.areaName} and votedNo = #{candidate.votedNo} 
    </update>

    <delete id="removeAll">
    	delete from Candidate
    </delete>
    
    <delete id="remove">
    	delete from Candidate
    	where electionID = #{electionID} and cityName = #{cityName} and areaName = #{areaName} and votedNo = #{votedNo} 
    </delete>
    
</mapper>
